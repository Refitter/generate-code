name: "Generate C# Refit interface using Refitter"
description: "Generates a C# Refit interface using Refitter from an OpenAPI Specifications file or URL"
branding:
  icon: code
  color: green

inputs:
  openapi-url:
    description: If set, the OpenAPI document will be loaded from this URL instead of openapi-file.
    required: false
  openapi-file:
    description: The path to the OpenAPI document to generate a client library for
    required: false
    default: openapi.json
  namespace:
    description: The default namespace used for the generated types
    required: false   
  use-api-response:
    description: Return Task<IApiResponse<T>> instead of Task<T>
    required: false
    default: false
    type: boolean
  cancellation-tokens:
    description: Use cancellation tokens
    required: false
    default: false
    type: boolean
  multiple-interfaces:
    type: choice
    description: Generate a Refit interface for each endpoint. May be one of ByEndpoint, ByTag
    options:
    - ByEndpoint
    - ByTag
  command-args:
    description: Optional, additional arguments to pass through to Refitter
    required: false
    type: string
  publish-artifacts:
    description: Setting this will publish the generated code as C# files
    required: false
    type: boolean
    default: false
    

runs:
  using: composite
  steps:
    - name: Install Refitter
      run: dotnet tool install --global refitter
      shell: pwsh

    - name: Generate Client Interface
      run: |
        $input = ""
        if ("${{ inputs.openapi-url }}") {
          $input = "${{ inputs.openapi-url }}"
        } else {
          $input = "${{ inputs.openapi-file }}"
        }
        $args = ""
        if ("${{ inputs.namespace }}") {
          $args = "$args --namespace ${{ inputs.namespace }}"
        }
        if ($${{ inputs.use-api-response }}) {
          $args = "$args --use-api-response"
        }
        if ($${{ inputs.cancellation-tokens }}) {
          $args = "$args --cancellation-tokens"
        }
        if ($${{ inputs.multiple-interfaces }}) {
          $args = "$args --multiple-interfaces ${{ inputs.multiple-interfaces }}"
        }
        Write-Host "refitter $input $args ${{ inputs.command-args }}"
        Start-Process refitter `
          -Args "$input $args ${{ inputs.command-args }}" `
          -NoNewWindow `
          -PassThru `
          -Wait
      shell: pwsh

    - name: Publish Generated Code Artifacts
      if: ${{ inputs.publish-artifacts }}
      uses: actions/upload-artifact@v3
      with:
        name: Refit C# Client Code
        path: Output.cs
